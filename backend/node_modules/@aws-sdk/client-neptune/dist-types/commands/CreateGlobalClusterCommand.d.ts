import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { CreateGlobalClusterMessage, CreateGlobalClusterResult } from "../models/models_0";
import { NeptuneClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../NeptuneClient";
export interface CreateGlobalClusterCommandInput extends CreateGlobalClusterMessage {
}
export interface CreateGlobalClusterCommandOutput extends CreateGlobalClusterResult, __MetadataBearer {
}
/**
 * <p>Creates a Neptune global database spread across multiple Amazon Regions.
 *       The global database contains a single primary cluster with read-write
 *       capability, and read-only secondary clusters that receive data from the
 *       primary cluster through high-speed replication performed by the Neptune
 *       storage subsystem.</p>
 *
 *          <p>You can create a global database that is initially empty, and then
 *       add a primary cluster and secondary clusters to it, or you can specify
 *       an existing Neptune cluster during the create operation to become the
 *       primary cluster of the global database.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { NeptuneClient, CreateGlobalClusterCommand } from "@aws-sdk/client-neptune"; // ES Modules import
 * // const { NeptuneClient, CreateGlobalClusterCommand } = require("@aws-sdk/client-neptune"); // CommonJS import
 * const client = new NeptuneClient(config);
 * const command = new CreateGlobalClusterCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link CreateGlobalClusterCommandInput} for command's `input` shape.
 * @see {@link CreateGlobalClusterCommandOutput} for command's `response` shape.
 * @see {@link NeptuneClientResolvedConfig | config} for NeptuneClient's `config` shape.
 *
 */
export declare class CreateGlobalClusterCommand extends $Command<CreateGlobalClusterCommandInput, CreateGlobalClusterCommandOutput, NeptuneClientResolvedConfig> {
    readonly input: CreateGlobalClusterCommandInput;
    constructor(input: CreateGlobalClusterCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NeptuneClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateGlobalClusterCommandInput, CreateGlobalClusterCommandOutput>;
    private serialize;
    private deserialize;
}
