import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { NeptuneServiceException as __BaseException } from "./NeptuneServiceException";
export interface AddRoleToDBClusterMessage {
    
    DBClusterIdentifier: string | undefined;
    
    RoleArn: string | undefined;
    
    FeatureName?: string;
}

export declare class DBClusterNotFoundFault extends __BaseException {
    readonly name: "DBClusterNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBClusterNotFoundFault, __BaseException>);
}

export declare class DBClusterRoleAlreadyExistsFault extends __BaseException {
    readonly name: "DBClusterRoleAlreadyExistsFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBClusterRoleAlreadyExistsFault, __BaseException>);
}

export declare class DBClusterRoleQuotaExceededFault extends __BaseException {
    readonly name: "DBClusterRoleQuotaExceededFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBClusterRoleQuotaExceededFault, __BaseException>);
}

export declare class InvalidDBClusterStateFault extends __BaseException {
    readonly name: "InvalidDBClusterStateFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidDBClusterStateFault, __BaseException>);
}
export interface AddSourceIdentifierToSubscriptionMessage {
    
    SubscriptionName: string | undefined;
    
    SourceIdentifier: string | undefined;
}

export interface EventSubscription {
    
    CustomerAwsId?: string;
    
    CustSubscriptionId?: string;
    
    SnsTopicArn?: string;
    
    Status?: string;
    
    SubscriptionCreationTime?: string;
    
    SourceType?: string;
    
    SourceIdsList?: string[];
    
    EventCategoriesList?: string[];
    
    Enabled?: boolean;
    
    EventSubscriptionArn?: string;
}
export interface AddSourceIdentifierToSubscriptionResult {
    
    EventSubscription?: EventSubscription;
}

export declare class SourceNotFoundFault extends __BaseException {
    readonly name: "SourceNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<SourceNotFoundFault, __BaseException>);
}

export declare class SubscriptionNotFoundFault extends __BaseException {
    readonly name: "SubscriptionNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<SubscriptionNotFoundFault, __BaseException>);
}

export interface Tag {
    
    Key?: string;
    
    Value?: string;
}
export interface AddTagsToResourceMessage {
    
    ResourceName: string | undefined;
    
    Tags: Tag[] | undefined;
}

export declare class DBInstanceNotFoundFault extends __BaseException {
    readonly name: "DBInstanceNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBInstanceNotFoundFault, __BaseException>);
}

export declare class DBSnapshotNotFoundFault extends __BaseException {
    readonly name: "DBSnapshotNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBSnapshotNotFoundFault, __BaseException>);
}
export interface ApplyPendingMaintenanceActionMessage {
    
    ResourceIdentifier: string | undefined;
    
    ApplyAction: string | undefined;
    
    OptInType: string | undefined;
}

export interface PendingMaintenanceAction {
    
    Action?: string;
    
    AutoAppliedAfterDate?: Date;
    
    ForcedApplyDate?: Date;
    
    OptInStatus?: string;
    
    CurrentApplyDate?: Date;
    
    Description?: string;
}

export interface ResourcePendingMaintenanceActions {
    
    ResourceIdentifier?: string;
    
    PendingMaintenanceActionDetails?: PendingMaintenanceAction[];
}
export interface ApplyPendingMaintenanceActionResult {
    
    ResourcePendingMaintenanceActions?: ResourcePendingMaintenanceActions;
}

export declare class ResourceNotFoundFault extends __BaseException {
    readonly name: "ResourceNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ResourceNotFoundFault, __BaseException>);
}
export interface CopyDBClusterParameterGroupMessage {
    
    SourceDBClusterParameterGroupIdentifier: string | undefined;
    
    TargetDBClusterParameterGroupIdentifier: string | undefined;
    
    TargetDBClusterParameterGroupDescription: string | undefined;
    
    Tags?: Tag[];
}

export interface DBClusterParameterGroup {
    
    DBClusterParameterGroupName?: string;
    
    DBParameterGroupFamily?: string;
    
    Description?: string;
    
    DBClusterParameterGroupArn?: string;
}
export interface CopyDBClusterParameterGroupResult {
    
    DBClusterParameterGroup?: DBClusterParameterGroup;
}

export declare class DBParameterGroupAlreadyExistsFault extends __BaseException {
    readonly name: "DBParameterGroupAlreadyExistsFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBParameterGroupAlreadyExistsFault, __BaseException>);
}

export declare class DBParameterGroupNotFoundFault extends __BaseException {
    readonly name: "DBParameterGroupNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBParameterGroupNotFoundFault, __BaseException>);
}

export declare class DBParameterGroupQuotaExceededFault extends __BaseException {
    readonly name: "DBParameterGroupQuotaExceededFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBParameterGroupQuotaExceededFault, __BaseException>);
}
export interface CopyDBClusterSnapshotMessage {
    
    SourceDBClusterSnapshotIdentifier: string | undefined;
    
    TargetDBClusterSnapshotIdentifier: string | undefined;
    
    KmsKeyId?: string;
    
    PreSignedUrl?: string;
    
    CopyTags?: boolean;
    
    Tags?: Tag[];
}

export interface DBClusterSnapshot {
    
    AvailabilityZones?: string[];
    
    DBClusterSnapshotIdentifier?: string;
    
    DBClusterIdentifier?: string;
    
    SnapshotCreateTime?: Date;
    
    Engine?: string;
    
    AllocatedStorage?: number;
    
    Status?: string;
    
    Port?: number;
    
    VpcId?: string;
    
    ClusterCreateTime?: Date;
    
    MasterUsername?: string;
    
    EngineVersion?: string;
    
    LicenseModel?: string;
    
    SnapshotType?: string;
    
    PercentProgress?: number;
    
    StorageEncrypted?: boolean;
    
    KmsKeyId?: string;
    
    DBClusterSnapshotArn?: string;
    
    SourceDBClusterSnapshotArn?: string;
    
    IAMDatabaseAuthenticationEnabled?: boolean;
}
export interface CopyDBClusterSnapshotResult {
    
    DBClusterSnapshot?: DBClusterSnapshot;
}

export declare class DBClusterSnapshotAlreadyExistsFault extends __BaseException {
    readonly name: "DBClusterSnapshotAlreadyExistsFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBClusterSnapshotAlreadyExistsFault, __BaseException>);
}

export declare class DBClusterSnapshotNotFoundFault extends __BaseException {
    readonly name: "DBClusterSnapshotNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBClusterSnapshotNotFoundFault, __BaseException>);
}

export declare class InvalidDBClusterSnapshotStateFault extends __BaseException {
    readonly name: "InvalidDBClusterSnapshotStateFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidDBClusterSnapshotStateFault, __BaseException>);
}

export declare class KMSKeyNotAccessibleFault extends __BaseException {
    readonly name: "KMSKeyNotAccessibleFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<KMSKeyNotAccessibleFault, __BaseException>);
}

export declare class SnapshotQuotaExceededFault extends __BaseException {
    readonly name: "SnapshotQuotaExceededFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<SnapshotQuotaExceededFault, __BaseException>);
}
export interface CopyDBParameterGroupMessage {
    
    SourceDBParameterGroupIdentifier: string | undefined;
    
    TargetDBParameterGroupIdentifier: string | undefined;
    
    TargetDBParameterGroupDescription: string | undefined;
    
    Tags?: Tag[];
}

export interface DBParameterGroup {
    
    DBParameterGroupName?: string;
    
    DBParameterGroupFamily?: string;
    
    Description?: string;
    
    DBParameterGroupArn?: string;
}
export interface CopyDBParameterGroupResult {
    
    DBParameterGroup?: DBParameterGroup;
}
export interface CreateDBClusterMessage {
    
    AvailabilityZones?: string[];
    
    BackupRetentionPeriod?: number;
    
    CharacterSetName?: string;
    
    CopyTagsToSnapshot?: boolean;
    
    DatabaseName?: string;
    
    DBClusterIdentifier: string | undefined;
    
    DBClusterParameterGroupName?: string;
    
    VpcSecurityGroupIds?: string[];
    
    DBSubnetGroupName?: string;
    
    Engine: string | undefined;
    
    EngineVersion?: string;
    
    Port?: number;
    
    MasterUsername?: string;
    
    MasterUserPassword?: string;
    
    OptionGroupName?: string;
    
    PreferredBackupWindow?: string;
    
    PreferredMaintenanceWindow?: string;
    
    ReplicationSourceIdentifier?: string;
    
    Tags?: Tag[];
    
    StorageEncrypted?: boolean;
    
    KmsKeyId?: string;
    
    PreSignedUrl?: string;
    
    EnableIAMDatabaseAuthentication?: boolean;
    
    EnableCloudwatchLogsExports?: string[];
    
    DeletionProtection?: boolean;
    
    GlobalClusterIdentifier?: string;
}

export interface DBClusterRole {
    
    RoleArn?: string;
    
    Status?: string;
    
    FeatureName?: string;
}

export interface DBClusterMember {
    
    DBInstanceIdentifier?: string;
    
    IsClusterWriter?: boolean;
    
    DBClusterParameterGroupStatus?: string;
    
    PromotionTier?: number;
}

export interface DBClusterOptionGroupStatus {
    
    DBClusterOptionGroupName?: string;
    
    Status?: string;
}

export interface VpcSecurityGroupMembership {
    
    VpcSecurityGroupId?: string;
    
    Status?: string;
}

export interface DBCluster {
    
    AllocatedStorage?: number;
    
    AvailabilityZones?: string[];
    
    BackupRetentionPeriod?: number;
    
    CharacterSetName?: string;
    
    DatabaseName?: string;
    
    DBClusterIdentifier?: string;
    
    DBClusterParameterGroup?: string;
    
    DBSubnetGroup?: string;
    
    Status?: string;
    
    PercentProgress?: string;
    
    EarliestRestorableTime?: Date;
    
    Endpoint?: string;
    
    ReaderEndpoint?: string;
    
    MultiAZ?: boolean;
    
    Engine?: string;
    
    EngineVersion?: string;
    
    LatestRestorableTime?: Date;
    
    Port?: number;
    
    MasterUsername?: string;
    
    DBClusterOptionGroupMemberships?: DBClusterOptionGroupStatus[];
    
    PreferredBackupWindow?: string;
    
    PreferredMaintenanceWindow?: string;
    
    ReplicationSourceIdentifier?: string;
    
    ReadReplicaIdentifiers?: string[];
    
    DBClusterMembers?: DBClusterMember[];
    
    VpcSecurityGroups?: VpcSecurityGroupMembership[];
    
    HostedZoneId?: string;
    
    StorageEncrypted?: boolean;
    
    KmsKeyId?: string;
    
    DbClusterResourceId?: string;
    
    DBClusterArn?: string;
    
    AssociatedRoles?: DBClusterRole[];
    
    IAMDatabaseAuthenticationEnabled?: boolean;
    
    CloneGroupId?: string;
    
    ClusterCreateTime?: Date;
    
    CopyTagsToSnapshot?: boolean;
    
    EnabledCloudwatchLogsExports?: string[];
    
    DeletionProtection?: boolean;
    
    CrossAccountClone?: boolean;
    
    AutomaticRestartTime?: Date;
}
export interface CreateDBClusterResult {
    
    DBCluster?: DBCluster;
}

export declare class DBClusterAlreadyExistsFault extends __BaseException {
    readonly name: "DBClusterAlreadyExistsFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBClusterAlreadyExistsFault, __BaseException>);
}

export declare class DBClusterParameterGroupNotFoundFault extends __BaseException {
    readonly name: "DBClusterParameterGroupNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBClusterParameterGroupNotFoundFault, __BaseException>);
}

export declare class DBClusterQuotaExceededFault extends __BaseException {
    readonly name: "DBClusterQuotaExceededFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBClusterQuotaExceededFault, __BaseException>);
}

export declare class DBSubnetGroupDoesNotCoverEnoughAZs extends __BaseException {
    readonly name: "DBSubnetGroupDoesNotCoverEnoughAZs";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBSubnetGroupDoesNotCoverEnoughAZs, __BaseException>);
}

export declare class DBSubnetGroupNotFoundFault extends __BaseException {
    readonly name: "DBSubnetGroupNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBSubnetGroupNotFoundFault, __BaseException>);
}

export declare class GlobalClusterNotFoundFault extends __BaseException {
    readonly name: "GlobalClusterNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<GlobalClusterNotFoundFault, __BaseException>);
}

export declare class InsufficientStorageClusterCapacityFault extends __BaseException {
    readonly name: "InsufficientStorageClusterCapacityFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InsufficientStorageClusterCapacityFault, __BaseException>);
}

export declare class InvalidDBInstanceStateFault extends __BaseException {
    readonly name: "InvalidDBInstanceStateFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidDBInstanceStateFault, __BaseException>);
}

export declare class InvalidDBSubnetGroupStateFault extends __BaseException {
    readonly name: "InvalidDBSubnetGroupStateFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidDBSubnetGroupStateFault, __BaseException>);
}

export declare class InvalidGlobalClusterStateFault extends __BaseException {
    readonly name: "InvalidGlobalClusterStateFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidGlobalClusterStateFault, __BaseException>);
}

export declare class InvalidSubnet extends __BaseException {
    readonly name: "InvalidSubnet";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidSubnet, __BaseException>);
}

export declare class InvalidVPCNetworkStateFault extends __BaseException {
    readonly name: "InvalidVPCNetworkStateFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidVPCNetworkStateFault, __BaseException>);
}

export declare class StorageQuotaExceededFault extends __BaseException {
    readonly name: "StorageQuotaExceededFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<StorageQuotaExceededFault, __BaseException>);
}
export interface CreateDBClusterEndpointMessage {
    
    DBClusterIdentifier: string | undefined;
    
    DBClusterEndpointIdentifier: string | undefined;
    
    EndpointType: string | undefined;
    
    StaticMembers?: string[];
    
    ExcludedMembers?: string[];
    
    Tags?: Tag[];
}

export interface CreateDBClusterEndpointOutput {
    
    DBClusterEndpointIdentifier?: string;
    
    DBClusterIdentifier?: string;
    
    DBClusterEndpointResourceIdentifier?: string;
    
    Endpoint?: string;
    
    Status?: string;
    
    EndpointType?: string;
    
    CustomEndpointType?: string;
    
    StaticMembers?: string[];
    
    ExcludedMembers?: string[];
    
    DBClusterEndpointArn?: string;
}

export declare class DBClusterEndpointAlreadyExistsFault extends __BaseException {
    readonly name: "DBClusterEndpointAlreadyExistsFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBClusterEndpointAlreadyExistsFault, __BaseException>);
}

export declare class DBClusterEndpointQuotaExceededFault extends __BaseException {
    readonly name: "DBClusterEndpointQuotaExceededFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBClusterEndpointQuotaExceededFault, __BaseException>);
}
export interface CreateDBClusterParameterGroupMessage {
    
    DBClusterParameterGroupName: string | undefined;
    
    DBParameterGroupFamily: string | undefined;
    
    Description: string | undefined;
    
    Tags?: Tag[];
}
export interface CreateDBClusterParameterGroupResult {
    
    DBClusterParameterGroup?: DBClusterParameterGroup;
}
export interface CreateDBClusterSnapshotMessage {
    
    DBClusterSnapshotIdentifier: string | undefined;
    
    DBClusterIdentifier: string | undefined;
    
    Tags?: Tag[];
}
export interface CreateDBClusterSnapshotResult {
    
    DBClusterSnapshot?: DBClusterSnapshot;
}

export declare class AuthorizationNotFoundFault extends __BaseException {
    readonly name: "AuthorizationNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<AuthorizationNotFoundFault, __BaseException>);
}
export interface CreateDBInstanceMessage {
    
    DBName?: string;
    
    DBInstanceIdentifier: string | undefined;
    
    AllocatedStorage?: number;
    
    DBInstanceClass: string | undefined;
    
    Engine: string | undefined;
    
    MasterUsername?: string;
    
    MasterUserPassword?: string;
    
    DBSecurityGroups?: string[];
    
    VpcSecurityGroupIds?: string[];
    
    AvailabilityZone?: string;
    
    DBSubnetGroupName?: string;
    
    PreferredMaintenanceWindow?: string;
    
    DBParameterGroupName?: string;
    
    BackupRetentionPeriod?: number;
    
    PreferredBackupWindow?: string;
    
    Port?: number;
    
    MultiAZ?: boolean;
    
    EngineVersion?: string;
    
    AutoMinorVersionUpgrade?: boolean;
    
    LicenseModel?: string;
    
    Iops?: number;
    
    OptionGroupName?: string;
    
    CharacterSetName?: string;
    
    PubliclyAccessible?: boolean;
    
    Tags?: Tag[];
    
    DBClusterIdentifier?: string;
    
    StorageType?: string;
    
    TdeCredentialArn?: string;
    
    TdeCredentialPassword?: string;
    
    StorageEncrypted?: boolean;
    
    KmsKeyId?: string;
    
    Domain?: string;
    
    CopyTagsToSnapshot?: boolean;
    
    MonitoringInterval?: number;
    
    MonitoringRoleArn?: string;
    
    DomainIAMRoleName?: string;
    
    PromotionTier?: number;
    
    Timezone?: string;
    
    EnableIAMDatabaseAuthentication?: boolean;
    
    EnablePerformanceInsights?: boolean;
    
    PerformanceInsightsKMSKeyId?: string;
    
    EnableCloudwatchLogsExports?: string[];
    
    DeletionProtection?: boolean;
}

export interface DBParameterGroupStatus {
    
    DBParameterGroupName?: string;
    
    ParameterApplyStatus?: string;
}

export interface DBSecurityGroupMembership {
    
    DBSecurityGroupName?: string;
    
    Status?: string;
}

export interface AvailabilityZone {
    
    Name?: string;
}

export interface Subnet {
    
    SubnetIdentifier?: string;
    
    SubnetAvailabilityZone?: AvailabilityZone;
    
    SubnetStatus?: string;
}

export interface DBSubnetGroup {
    
    DBSubnetGroupName?: string;
    
    DBSubnetGroupDescription?: string;
    
    VpcId?: string;
    
    SubnetGroupStatus?: string;
    
    Subnets?: Subnet[];
    
    DBSubnetGroupArn?: string;
}

export interface DomainMembership {
    
    Domain?: string;
    
    Status?: string;
    
    FQDN?: string;
    
    IAMRoleName?: string;
}

export interface Endpoint {
    
    Address?: string;
    
    Port?: number;
    
    HostedZoneId?: string;
}

export interface OptionGroupMembership {
    
    OptionGroupName?: string;
    
    Status?: string;
}

export interface PendingCloudwatchLogsExports {
    
    LogTypesToEnable?: string[];
    
    LogTypesToDisable?: string[];
}

export interface PendingModifiedValues {
    
    DBInstanceClass?: string;
    
    AllocatedStorage?: number;
    
    MasterUserPassword?: string;
    
    Port?: number;
    
    BackupRetentionPeriod?: number;
    
    MultiAZ?: boolean;
    
    EngineVersion?: string;
    
    LicenseModel?: string;
    
    Iops?: number;
    
    DBInstanceIdentifier?: string;
    
    StorageType?: string;
    
    CACertificateIdentifier?: string;
    
    DBSubnetGroupName?: string;
    
    PendingCloudwatchLogsExports?: PendingCloudwatchLogsExports;
}

export interface DBInstanceStatusInfo {
    
    StatusType?: string;
    
    Normal?: boolean;
    
    Status?: string;
    
    Message?: string;
}

export interface DBInstance {
    
    DBInstanceIdentifier?: string;
    
    DBInstanceClass?: string;
    
    Engine?: string;
    
    DBInstanceStatus?: string;
    
    MasterUsername?: string;
    
    DBName?: string;
    
    Endpoint?: Endpoint;
    
    AllocatedStorage?: number;
    
    InstanceCreateTime?: Date;
    
    PreferredBackupWindow?: string;
    
    BackupRetentionPeriod?: number;
    
    DBSecurityGroups?: DBSecurityGroupMembership[];
    
    VpcSecurityGroups?: VpcSecurityGroupMembership[];
    
    DBParameterGroups?: DBParameterGroupStatus[];
    
    AvailabilityZone?: string;
    
    DBSubnetGroup?: DBSubnetGroup;
    
    PreferredMaintenanceWindow?: string;
    
    PendingModifiedValues?: PendingModifiedValues;
    
    LatestRestorableTime?: Date;
    
    MultiAZ?: boolean;
    
    EngineVersion?: string;
    
    AutoMinorVersionUpgrade?: boolean;
    
    ReadReplicaSourceDBInstanceIdentifier?: string;
    
    ReadReplicaDBInstanceIdentifiers?: string[];
    
    ReadReplicaDBClusterIdentifiers?: string[];
    
    LicenseModel?: string;
    
    Iops?: number;
    
    OptionGroupMemberships?: OptionGroupMembership[];
    
    CharacterSetName?: string;
    
    SecondaryAvailabilityZone?: string;
    
    PubliclyAccessible?: boolean;
    
    StatusInfos?: DBInstanceStatusInfo[];
    
    StorageType?: string;
    
    TdeCredentialArn?: string;
    
    DbInstancePort?: number;
    
    DBClusterIdentifier?: string;
    
    StorageEncrypted?: boolean;
    
    KmsKeyId?: string;
    
    DbiResourceId?: string;
    
    CACertificateIdentifier?: string;
    
    DomainMemberships?: DomainMembership[];
    
    CopyTagsToSnapshot?: boolean;
    
    MonitoringInterval?: number;
    
    EnhancedMonitoringResourceArn?: string;
    
    MonitoringRoleArn?: string;
    
    PromotionTier?: number;
    
    DBInstanceArn?: string;
    
    Timezone?: string;
    
    IAMDatabaseAuthenticationEnabled?: boolean;
    
    PerformanceInsightsEnabled?: boolean;
    
    PerformanceInsightsKMSKeyId?: string;
    
    EnabledCloudwatchLogsExports?: string[];
    
    DeletionProtection?: boolean;
}
export interface CreateDBInstanceResult {
    
    DBInstance?: DBInstance;
}

export declare class DBInstanceAlreadyExistsFault extends __BaseException {
    readonly name: "DBInstanceAlreadyExistsFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBInstanceAlreadyExistsFault, __BaseException>);
}

export declare class DBSecurityGroupNotFoundFault extends __BaseException {
    readonly name: "DBSecurityGroupNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBSecurityGroupNotFoundFault, __BaseException>);
}

export declare class DomainNotFoundFault extends __BaseException {
    readonly name: "DomainNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DomainNotFoundFault, __BaseException>);
}

export declare class InstanceQuotaExceededFault extends __BaseException {
    readonly name: "InstanceQuotaExceededFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InstanceQuotaExceededFault, __BaseException>);
}

export declare class InsufficientDBInstanceCapacityFault extends __BaseException {
    readonly name: "InsufficientDBInstanceCapacityFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InsufficientDBInstanceCapacityFault, __BaseException>);
}

export declare class OptionGroupNotFoundFault extends __BaseException {
    readonly name: "OptionGroupNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<OptionGroupNotFoundFault, __BaseException>);
}

export declare class ProvisionedIopsNotAvailableInAZFault extends __BaseException {
    readonly name: "ProvisionedIopsNotAvailableInAZFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ProvisionedIopsNotAvailableInAZFault, __BaseException>);
}

export declare class StorageTypeNotSupportedFault extends __BaseException {
    readonly name: "StorageTypeNotSupportedFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<StorageTypeNotSupportedFault, __BaseException>);
}
export interface CreateDBParameterGroupMessage {
    
    DBParameterGroupName: string | undefined;
    
    DBParameterGroupFamily: string | undefined;
    
    Description: string | undefined;
    
    Tags?: Tag[];
}
export interface CreateDBParameterGroupResult {
    
    DBParameterGroup?: DBParameterGroup;
}
export interface CreateDBSubnetGroupMessage {
    
    DBSubnetGroupName: string | undefined;
    
    DBSubnetGroupDescription: string | undefined;
    
    SubnetIds: string[] | undefined;
    
    Tags?: Tag[];
}
export interface CreateDBSubnetGroupResult {
    
    DBSubnetGroup?: DBSubnetGroup;
}

export declare class DBSubnetGroupAlreadyExistsFault extends __BaseException {
    readonly name: "DBSubnetGroupAlreadyExistsFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBSubnetGroupAlreadyExistsFault, __BaseException>);
}

export declare class DBSubnetGroupQuotaExceededFault extends __BaseException {
    readonly name: "DBSubnetGroupQuotaExceededFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBSubnetGroupQuotaExceededFault, __BaseException>);
}

export declare class DBSubnetQuotaExceededFault extends __BaseException {
    readonly name: "DBSubnetQuotaExceededFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBSubnetQuotaExceededFault, __BaseException>);
}
export interface CreateEventSubscriptionMessage {
    
    SubscriptionName: string | undefined;
    
    SnsTopicArn: string | undefined;
    
    SourceType?: string;
    
    EventCategories?: string[];
    
    SourceIds?: string[];
    
    Enabled?: boolean;
    
    Tags?: Tag[];
}
export interface CreateEventSubscriptionResult {
    
    EventSubscription?: EventSubscription;
}

export declare class EventSubscriptionQuotaExceededFault extends __BaseException {
    readonly name: "EventSubscriptionQuotaExceededFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<EventSubscriptionQuotaExceededFault, __BaseException>);
}

export declare class SNSInvalidTopicFault extends __BaseException {
    readonly name: "SNSInvalidTopicFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<SNSInvalidTopicFault, __BaseException>);
}

export declare class SNSNoAuthorizationFault extends __BaseException {
    readonly name: "SNSNoAuthorizationFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<SNSNoAuthorizationFault, __BaseException>);
}

export declare class SNSTopicArnNotFoundFault extends __BaseException {
    readonly name: "SNSTopicArnNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<SNSTopicArnNotFoundFault, __BaseException>);
}

export declare class SubscriptionAlreadyExistFault extends __BaseException {
    readonly name: "SubscriptionAlreadyExistFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<SubscriptionAlreadyExistFault, __BaseException>);
}

export declare class SubscriptionCategoryNotFoundFault extends __BaseException {
    readonly name: "SubscriptionCategoryNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<SubscriptionCategoryNotFoundFault, __BaseException>);
}
export interface CreateGlobalClusterMessage {
    
    GlobalClusterIdentifier: string | undefined;
    
    SourceDBClusterIdentifier?: string;
    
    Engine?: string;
    
    EngineVersion?: string;
    
    DeletionProtection?: boolean;
    
    StorageEncrypted?: boolean;
}

export interface GlobalClusterMember {
    
    DBClusterArn?: string;
    
    Readers?: string[];
    
    IsWriter?: boolean;
}

export interface GlobalCluster {
    
    GlobalClusterIdentifier?: string;
    
    GlobalClusterResourceId?: string;
    
    GlobalClusterArn?: string;
    
    Status?: string;
    
    Engine?: string;
    
    EngineVersion?: string;
    
    StorageEncrypted?: boolean;
    
    DeletionProtection?: boolean;
    
    GlobalClusterMembers?: GlobalClusterMember[];
}
export interface CreateGlobalClusterResult {
    
    GlobalCluster?: GlobalCluster;
}

export declare class GlobalClusterAlreadyExistsFault extends __BaseException {
    readonly name: "GlobalClusterAlreadyExistsFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<GlobalClusterAlreadyExistsFault, __BaseException>);
}

export declare class GlobalClusterQuotaExceededFault extends __BaseException {
    readonly name: "GlobalClusterQuotaExceededFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<GlobalClusterQuotaExceededFault, __BaseException>);
}
export interface DeleteDBClusterMessage {
    
    DBClusterIdentifier: string | undefined;
    
    SkipFinalSnapshot?: boolean;
    
    FinalDBSnapshotIdentifier?: string;
}
export interface DeleteDBClusterResult {
    
    DBCluster?: DBCluster;
}

export declare class DBClusterEndpointNotFoundFault extends __BaseException {
    readonly name: "DBClusterEndpointNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBClusterEndpointNotFoundFault, __BaseException>);
}
export interface DeleteDBClusterEndpointMessage {
    
    DBClusterEndpointIdentifier: string | undefined;
}

export interface DeleteDBClusterEndpointOutput {
    
    DBClusterEndpointIdentifier?: string;
    
    DBClusterIdentifier?: string;
    
    DBClusterEndpointResourceIdentifier?: string;
    
    Endpoint?: string;
    
    Status?: string;
    
    EndpointType?: string;
    
    CustomEndpointType?: string;
    
    StaticMembers?: string[];
    
    ExcludedMembers?: string[];
    
    DBClusterEndpointArn?: string;
}

export declare class InvalidDBClusterEndpointStateFault extends __BaseException {
    readonly name: "InvalidDBClusterEndpointStateFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidDBClusterEndpointStateFault, __BaseException>);
}
export interface DeleteDBClusterParameterGroupMessage {
    
    DBClusterParameterGroupName: string | undefined;
}

export declare class InvalidDBParameterGroupStateFault extends __BaseException {
    readonly name: "InvalidDBParameterGroupStateFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidDBParameterGroupStateFault, __BaseException>);
}
export interface DeleteDBClusterSnapshotMessage {
    
    DBClusterSnapshotIdentifier: string | undefined;
}
export interface DeleteDBClusterSnapshotResult {
    
    DBClusterSnapshot?: DBClusterSnapshot;
}

export declare class DBSnapshotAlreadyExistsFault extends __BaseException {
    readonly name: "DBSnapshotAlreadyExistsFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBSnapshotAlreadyExistsFault, __BaseException>);
}
export interface DeleteDBInstanceMessage {
    
    DBInstanceIdentifier: string | undefined;
    
    SkipFinalSnapshot?: boolean;
    
    FinalDBSnapshotIdentifier?: string;
}
export interface DeleteDBInstanceResult {
    
    DBInstance?: DBInstance;
}
export interface DeleteDBParameterGroupMessage {
    
    DBParameterGroupName: string | undefined;
}
export interface DeleteDBSubnetGroupMessage {
    
    DBSubnetGroupName: string | undefined;
}

export declare class InvalidDBSubnetStateFault extends __BaseException {
    readonly name: "InvalidDBSubnetStateFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidDBSubnetStateFault, __BaseException>);
}
export interface DeleteEventSubscriptionMessage {
    
    SubscriptionName: string | undefined;
}
export interface DeleteEventSubscriptionResult {
    
    EventSubscription?: EventSubscription;
}

export declare class InvalidEventSubscriptionStateFault extends __BaseException {
    readonly name: "InvalidEventSubscriptionStateFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidEventSubscriptionStateFault, __BaseException>);
}
export interface DeleteGlobalClusterMessage {
    
    GlobalClusterIdentifier: string | undefined;
}
export interface DeleteGlobalClusterResult {
    
    GlobalCluster?: GlobalCluster;
}

export interface DBClusterEndpoint {
    
    DBClusterEndpointIdentifier?: string;
    
    DBClusterIdentifier?: string;
    
    DBClusterEndpointResourceIdentifier?: string;
    
    Endpoint?: string;
    
    Status?: string;
    
    EndpointType?: string;
    
    CustomEndpointType?: string;
    
    StaticMembers?: string[];
    
    ExcludedMembers?: string[];
    
    DBClusterEndpointArn?: string;
}
export interface DBClusterEndpointMessage {
    
    Marker?: string;
    
    DBClusterEndpoints?: DBClusterEndpoint[];
}

export interface Filter {
    
    Name: string | undefined;
    
    Values: string[] | undefined;
}
export interface DescribeDBClusterEndpointsMessage {
    
    DBClusterIdentifier?: string;
    
    DBClusterEndpointIdentifier?: string;
    
    Filters?: Filter[];
    
    MaxRecords?: number;
    
    Marker?: string;
}
export interface DBClusterParameterGroupsMessage {
    
    Marker?: string;
    
    DBClusterParameterGroups?: DBClusterParameterGroup[];
}
export interface DescribeDBClusterParameterGroupsMessage {
    
    DBClusterParameterGroupName?: string;
    
    Filters?: Filter[];
    
    MaxRecords?: number;
    
    Marker?: string;
}
export declare type ApplyMethod = "immediate" | "pending-reboot";

export interface Parameter {
    
    ParameterName?: string;
    
    ParameterValue?: string;
    
    Description?: string;
    
    Source?: string;
    
    ApplyType?: string;
    
    DataType?: string;
    
    AllowedValues?: string;
    
    IsModifiable?: boolean;
    
    MinimumEngineVersion?: string;
    
    ApplyMethod?: ApplyMethod | string;
}
export interface DBClusterParameterGroupDetails {
    
    Parameters?: Parameter[];
    
    Marker?: string;
}
export interface DescribeDBClusterParametersMessage {
    
    DBClusterParameterGroupName: string | undefined;
    
    Source?: string;
    
    Filters?: Filter[];
    
    MaxRecords?: number;
    
    Marker?: string;
}
export interface DBClusterMessage {
    
    Marker?: string;
    
    DBClusters?: DBCluster[];
}
export interface DescribeDBClustersMessage {
    
    DBClusterIdentifier?: string;
    
    Filters?: Filter[];
    
    MaxRecords?: number;
    
    Marker?: string;
}
export interface DescribeDBClusterSnapshotAttributesMessage {
    
    DBClusterSnapshotIdentifier: string | undefined;
}

export interface DBClusterSnapshotAttribute {
    
    AttributeName?: string;
    
    AttributeValues?: string[];
}

export interface DBClusterSnapshotAttributesResult {
    
    DBClusterSnapshotIdentifier?: string;
    
    DBClusterSnapshotAttributes?: DBClusterSnapshotAttribute[];
}
export interface DescribeDBClusterSnapshotAttributesResult {
    
    DBClusterSnapshotAttributesResult?: DBClusterSnapshotAttributesResult;
}
export interface DBClusterSnapshotMessage {
    
    Marker?: string;
    
    DBClusterSnapshots?: DBClusterSnapshot[];
}
export interface DescribeDBClusterSnapshotsMessage {
    
    DBClusterIdentifier?: string;
    
    DBClusterSnapshotIdentifier?: string;
    
    SnapshotType?: string;
    
    Filters?: Filter[];
    
    MaxRecords?: number;
    
    Marker?: string;
    
    IncludeShared?: boolean;
    
    IncludePublic?: boolean;
}

export interface CharacterSet {
    
    CharacterSetName?: string;
    
    CharacterSetDescription?: string;
}

export interface Timezone {
    
    TimezoneName?: string;
}

export interface UpgradeTarget {
    
    Engine?: string;
    
    EngineVersion?: string;
    
    Description?: string;
    
    AutoUpgrade?: boolean;
    
    IsMajorVersionUpgrade?: boolean;
    
    SupportsGlobalDatabases?: boolean;
}

export interface DBEngineVersion {
    
    Engine?: string;
    
    EngineVersion?: string;
    
    DBParameterGroupFamily?: string;
    
    DBEngineDescription?: string;
    
    DBEngineVersionDescription?: string;
    
    DefaultCharacterSet?: CharacterSet;
    
    SupportedCharacterSets?: CharacterSet[];
    
    ValidUpgradeTarget?: UpgradeTarget[];
    
    SupportedTimezones?: Timezone[];
    
    ExportableLogTypes?: string[];
    
    SupportsLogExportsToCloudwatchLogs?: boolean;
    
    SupportsReadReplica?: boolean;
    
    SupportsGlobalDatabases?: boolean;
}
export interface DBEngineVersionMessage {
    
    Marker?: string;
    
    DBEngineVersions?: DBEngineVersion[];
}
export interface DescribeDBEngineVersionsMessage {
    
    Engine?: string;
    
    EngineVersion?: string;
    
    DBParameterGroupFamily?: string;
    
    Filters?: Filter[];
    
    MaxRecords?: number;
    
    Marker?: string;
    
    DefaultOnly?: boolean;
    
    ListSupportedCharacterSets?: boolean;
    
    ListSupportedTimezones?: boolean;
}
export interface DBInstanceMessage {
    
    Marker?: string;
    
    DBInstances?: DBInstance[];
}
export interface DescribeDBInstancesMessage {
    
    DBInstanceIdentifier?: string;
    
    Filters?: Filter[];
    
    MaxRecords?: number;
    
    Marker?: string;
}
export interface DBParameterGroupsMessage {
    
    Marker?: string;
    
    DBParameterGroups?: DBParameterGroup[];
}
export interface DescribeDBParameterGroupsMessage {
    
    DBParameterGroupName?: string;
    
    Filters?: Filter[];
    
    MaxRecords?: number;
    
    Marker?: string;
}
export interface DBParameterGroupDetails {
    
    Parameters?: Parameter[];
    
    Marker?: string;
}
export interface DescribeDBParametersMessage {
    
    DBParameterGroupName: string | undefined;
    
    Source?: string;
    
    Filters?: Filter[];
    
    MaxRecords?: number;
    
    Marker?: string;
}
export interface DBSubnetGroupMessage {
    
    Marker?: string;
    
    DBSubnetGroups?: DBSubnetGroup[];
}
export interface DescribeDBSubnetGroupsMessage {
    
    DBSubnetGroupName?: string;
    
    Filters?: Filter[];
    
    MaxRecords?: number;
    
    Marker?: string;
}
export interface DescribeEngineDefaultClusterParametersMessage {
    
    DBParameterGroupFamily: string | undefined;
    
    Filters?: Filter[];
    
    MaxRecords?: number;
    
    Marker?: string;
}

export interface EngineDefaults {
    
    DBParameterGroupFamily?: string;
    
    Marker?: string;
    
    Parameters?: Parameter[];
}
export interface DescribeEngineDefaultClusterParametersResult {
    
    EngineDefaults?: EngineDefaults;
}
export interface DescribeEngineDefaultParametersMessage {
    
    DBParameterGroupFamily: string | undefined;
    
    Filters?: Filter[];
    
    MaxRecords?: number;
    
    Marker?: string;
}
export interface DescribeEngineDefaultParametersResult {
    
    EngineDefaults?: EngineDefaults;
}
export interface DescribeEventCategoriesMessage {
    
    SourceType?: string;
    
    Filters?: Filter[];
}

export interface EventCategoriesMap {
    
    SourceType?: string;
    
    EventCategories?: string[];
}
export interface EventCategoriesMessage {
    
    EventCategoriesMapList?: EventCategoriesMap[];
}
export declare type SourceType = "db-cluster" | "db-cluster-snapshot" | "db-instance" | "db-parameter-group" | "db-security-group" | "db-snapshot";
export interface DescribeEventsMessage {
    
    SourceIdentifier?: string;
    
    SourceType?: SourceType | string;
    
    StartTime?: Date;
    
    EndTime?: Date;
    
    Duration?: number;
    
    EventCategories?: string[];
    
    Filters?: Filter[];
    
    MaxRecords?: number;
    
    Marker?: string;
}

export interface Event {
    
    SourceIdentifier?: string;
    
    SourceType?: SourceType | string;
    
    Message?: string;
    
    EventCategories?: string[];
    
    Date?: Date;
    
    SourceArn?: string;
}
export interface EventsMessage {
    
    Marker?: string;
    
    Events?: Event[];
}
export interface DescribeEventSubscriptionsMessage {
    
    SubscriptionName?: string;
    
    Filters?: Filter[];
    
    MaxRecords?: number;
    
    Marker?: string;
}
export interface EventSubscriptionsMessage {
    
    Marker?: string;
    
    EventSubscriptionsList?: EventSubscription[];
}
export interface DescribeGlobalClustersMessage {
    
    GlobalClusterIdentifier?: string;
    
    MaxRecords?: number;
    
    Marker?: string;
}
export interface GlobalClustersMessage {
    
    Marker?: string;
    
    GlobalClusters?: GlobalCluster[];
}
export interface DescribeOrderableDBInstanceOptionsMessage {
    
    Engine: string | undefined;
    
    EngineVersion?: string;
    
    DBInstanceClass?: string;
    
    LicenseModel?: string;
    
    Vpc?: boolean;
    
    Filters?: Filter[];
    
    MaxRecords?: number;
    
    Marker?: string;
}

export interface OrderableDBInstanceOption {
    
    Engine?: string;
    
    EngineVersion?: string;
    
    DBInstanceClass?: string;
    
    LicenseModel?: string;
    
    AvailabilityZones?: AvailabilityZone[];
    
    MultiAZCapable?: boolean;
    
    ReadReplicaCapable?: boolean;
    
    Vpc?: boolean;
    
    SupportsStorageEncryption?: boolean;
    
    StorageType?: string;
    
    SupportsIops?: boolean;
    
    SupportsEnhancedMonitoring?: boolean;
    
    SupportsIAMDatabaseAuthentication?: boolean;
    
    SupportsPerformanceInsights?: boolean;
    
    MinStorageSize?: number;
    
    MaxStorageSize?: number;
    
    MinIopsPerDbInstance?: number;
    
    MaxIopsPerDbInstance?: number;
    
    MinIopsPerGib?: number;
    
    MaxIopsPerGib?: number;
    
    SupportsGlobalDatabases?: boolean;
}
export interface OrderableDBInstanceOptionsMessage {
    
    OrderableDBInstanceOptions?: OrderableDBInstanceOption[];
    
    Marker?: string;
}
export interface DescribePendingMaintenanceActionsMessage {
    
    ResourceIdentifier?: string;
    
    Filters?: Filter[];
    
    Marker?: string;
    
    MaxRecords?: number;
}
export interface PendingMaintenanceActionsMessage {
    
    PendingMaintenanceActions?: ResourcePendingMaintenanceActions[];
    
    Marker?: string;
}
export interface DescribeValidDBInstanceModificationsMessage {
    
    DBInstanceIdentifier: string | undefined;
}

export interface DoubleRange {
    
    From?: number;
    
    To?: number;
}

export interface Range {
    
    From?: number;
    
    To?: number;
    
    Step?: number;
}

export interface ValidStorageOptions {
    
    StorageType?: string;
    
    StorageSize?: Range[];
    
    ProvisionedIops?: Range[];
    
    IopsToStorageRatio?: DoubleRange[];
}

export interface ValidDBInstanceModificationsMessage {
    
    Storage?: ValidStorageOptions[];
}
export interface DescribeValidDBInstanceModificationsResult {
    
    ValidDBInstanceModificationsMessage?: ValidDBInstanceModificationsMessage;
}
export interface FailoverDBClusterMessage {
    
    DBClusterIdentifier?: string;
    
    TargetDBInstanceIdentifier?: string;
}
export interface FailoverDBClusterResult {
    
    DBCluster?: DBCluster;
}
export interface FailoverGlobalClusterMessage {
    
    GlobalClusterIdentifier: string | undefined;
    
    TargetDbClusterIdentifier: string | undefined;
}
export interface FailoverGlobalClusterResult {
    
    GlobalCluster?: GlobalCluster;
}
export interface ListTagsForResourceMessage {
    
    ResourceName: string | undefined;
    
    Filters?: Filter[];
}
export interface TagListMessage {
    
    TagList?: Tag[];
}

export declare class InvalidDBSecurityGroupStateFault extends __BaseException {
    readonly name: "InvalidDBSecurityGroupStateFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidDBSecurityGroupStateFault, __BaseException>);
}

export interface CloudwatchLogsExportConfiguration {
    
    EnableLogTypes?: string[];
    
    DisableLogTypes?: string[];
}
export interface ModifyDBClusterMessage {
    
    DBClusterIdentifier: string | undefined;
    
    NewDBClusterIdentifier?: string;
    
    ApplyImmediately?: boolean;
    
    BackupRetentionPeriod?: number;
    
    DBClusterParameterGroupName?: string;
    
    VpcSecurityGroupIds?: string[];
    
    Port?: number;
    
    MasterUserPassword?: string;
    
    OptionGroupName?: string;
    
    PreferredBackupWindow?: string;
    
    PreferredMaintenanceWindow?: string;
    
    EnableIAMDatabaseAuthentication?: boolean;
    
    CloudwatchLogsExportConfiguration?: CloudwatchLogsExportConfiguration;
    
    EngineVersion?: string;
    
    AllowMajorVersionUpgrade?: boolean;
    
    DBInstanceParameterGroupName?: string;
    
    DeletionProtection?: boolean;
    
    CopyTagsToSnapshot?: boolean;
}
export interface ModifyDBClusterResult {
    
    DBCluster?: DBCluster;
}
export interface ModifyDBClusterEndpointMessage {
    
    DBClusterEndpointIdentifier: string | undefined;
    
    EndpointType?: string;
    
    StaticMembers?: string[];
    
    ExcludedMembers?: string[];
}

export interface ModifyDBClusterEndpointOutput {
    
    DBClusterEndpointIdentifier?: string;
    
    DBClusterIdentifier?: string;
    
    DBClusterEndpointResourceIdentifier?: string;
    
    Endpoint?: string;
    
    Status?: string;
    
    EndpointType?: string;
    
    CustomEndpointType?: string;
    
    StaticMembers?: string[];
    
    ExcludedMembers?: string[];
    
    DBClusterEndpointArn?: string;
}
export interface DBClusterParameterGroupNameMessage {
    
    DBClusterParameterGroupName?: string;
}
export interface ModifyDBClusterParameterGroupMessage {
    
    DBClusterParameterGroupName: string | undefined;
    
    Parameters: Parameter[] | undefined;
}
export interface ModifyDBClusterSnapshotAttributeMessage {
    
    DBClusterSnapshotIdentifier: string | undefined;
    
    AttributeName: string | undefined;
    
    ValuesToAdd?: string[];
    
    ValuesToRemove?: string[];
}
export interface ModifyDBClusterSnapshotAttributeResult {
    
    DBClusterSnapshotAttributesResult?: DBClusterSnapshotAttributesResult;
}

export declare class SharedSnapshotQuotaExceededFault extends __BaseException {
    readonly name: "SharedSnapshotQuotaExceededFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<SharedSnapshotQuotaExceededFault, __BaseException>);
}

export declare class CertificateNotFoundFault extends __BaseException {
    readonly name: "CertificateNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<CertificateNotFoundFault, __BaseException>);
}

export declare class DBUpgradeDependencyFailureFault extends __BaseException {
    readonly name: "DBUpgradeDependencyFailureFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBUpgradeDependencyFailureFault, __BaseException>);
}
export interface ModifyDBInstanceMessage {
    
    DBInstanceIdentifier: string | undefined;
    
    AllocatedStorage?: number;
    
    DBInstanceClass?: string;
    
    DBSubnetGroupName?: string;
    
    DBSecurityGroups?: string[];
    
    VpcSecurityGroupIds?: string[];
    
    ApplyImmediately?: boolean;
    
    MasterUserPassword?: string;
    
    DBParameterGroupName?: string;
    
    BackupRetentionPeriod?: number;
    
    PreferredBackupWindow?: string;
    
    PreferredMaintenanceWindow?: string;
    
    MultiAZ?: boolean;
    
    EngineVersion?: string;
    
    AllowMajorVersionUpgrade?: boolean;
    
    AutoMinorVersionUpgrade?: boolean;
    
    LicenseModel?: string;
    
    Iops?: number;
    
    OptionGroupName?: string;
    
    NewDBInstanceIdentifier?: string;
    
    StorageType?: string;
    
    TdeCredentialArn?: string;
    
    TdeCredentialPassword?: string;
    
    CACertificateIdentifier?: string;
    
    Domain?: string;
    
    CopyTagsToSnapshot?: boolean;
    
    MonitoringInterval?: number;
    
    DBPortNumber?: number;
    
    PubliclyAccessible?: boolean;
    
    MonitoringRoleArn?: string;
    
    DomainIAMRoleName?: string;
    
    PromotionTier?: number;
    
    EnableIAMDatabaseAuthentication?: boolean;
    
    EnablePerformanceInsights?: boolean;
    
    PerformanceInsightsKMSKeyId?: string;
    
    CloudwatchLogsExportConfiguration?: CloudwatchLogsExportConfiguration;
    
    DeletionProtection?: boolean;
}
export interface ModifyDBInstanceResult {
    
    DBInstance?: DBInstance;
}
export interface DBParameterGroupNameMessage {
    
    DBParameterGroupName?: string;
}
export interface ModifyDBParameterGroupMessage {
    
    DBParameterGroupName: string | undefined;
    
    Parameters: Parameter[] | undefined;
}
export interface ModifyDBSubnetGroupMessage {
    
    DBSubnetGroupName: string | undefined;
    
    DBSubnetGroupDescription?: string;
    
    SubnetIds: string[] | undefined;
}
export interface ModifyDBSubnetGroupResult {
    
    DBSubnetGroup?: DBSubnetGroup;
}

export declare class SubnetAlreadyInUse extends __BaseException {
    readonly name: "SubnetAlreadyInUse";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<SubnetAlreadyInUse, __BaseException>);
}
export interface ModifyEventSubscriptionMessage {
    
    SubscriptionName: string | undefined;
    
    SnsTopicArn?: string;
    
    SourceType?: string;
    
    EventCategories?: string[];
    
    Enabled?: boolean;
}
export interface ModifyEventSubscriptionResult {
    
    EventSubscription?: EventSubscription;
}
export interface ModifyGlobalClusterMessage {
    
    GlobalClusterIdentifier: string | undefined;
    
    NewGlobalClusterIdentifier?: string;
    
    DeletionProtection?: boolean;
    
    EngineVersion?: string;
    
    AllowMajorVersionUpgrade?: boolean;
}
export interface ModifyGlobalClusterResult {
    
    GlobalCluster?: GlobalCluster;
}
export interface PromoteReadReplicaDBClusterMessage {
    
    DBClusterIdentifier: string | undefined;
}
export interface PromoteReadReplicaDBClusterResult {
    
    DBCluster?: DBCluster;
}
export interface RebootDBInstanceMessage {
    
    DBInstanceIdentifier: string | undefined;
    
    ForceFailover?: boolean;
}
export interface RebootDBInstanceResult {
    
    DBInstance?: DBInstance;
}
export interface RemoveFromGlobalClusterMessage {
    
    GlobalClusterIdentifier: string | undefined;
    
    DbClusterIdentifier: string | undefined;
}
export interface RemoveFromGlobalClusterResult {
    
    GlobalCluster?: GlobalCluster;
}

export declare class DBClusterRoleNotFoundFault extends __BaseException {
    readonly name: "DBClusterRoleNotFoundFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DBClusterRoleNotFoundFault, __BaseException>);
}
export interface RemoveRoleFromDBClusterMessage {
    
    DBClusterIdentifier: string | undefined;
    
    RoleArn: string | undefined;
    
    FeatureName?: string;
}
export interface RemoveSourceIdentifierFromSubscriptionMessage {
    
    SubscriptionName: string | undefined;
    
    SourceIdentifier: string | undefined;
}
export interface RemoveSourceIdentifierFromSubscriptionResult {
    
    EventSubscription?: EventSubscription;
}
export interface RemoveTagsFromResourceMessage {
    
    ResourceName: string | undefined;
    
    TagKeys: string[] | undefined;
}
export interface ResetDBClusterParameterGroupMessage {
    
    DBClusterParameterGroupName: string | undefined;
    
    ResetAllParameters?: boolean;
    
    Parameters?: Parameter[];
}
export interface ResetDBParameterGroupMessage {
    
    DBParameterGroupName: string | undefined;
    
    ResetAllParameters?: boolean;
    
    Parameters?: Parameter[];
}

export declare class InsufficientDBClusterCapacityFault extends __BaseException {
    readonly name: "InsufficientDBClusterCapacityFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InsufficientDBClusterCapacityFault, __BaseException>);
}

export declare class InvalidDBSnapshotStateFault extends __BaseException {
    readonly name: "InvalidDBSnapshotStateFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidDBSnapshotStateFault, __BaseException>);
}

export declare class InvalidRestoreFault extends __BaseException {
    readonly name: "InvalidRestoreFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidRestoreFault, __BaseException>);
}
export interface RestoreDBClusterFromSnapshotMessage {
    
    AvailabilityZones?: string[];
    
    DBClusterIdentifier: string | undefined;
    
    SnapshotIdentifier: string | undefined;
    
    Engine: string | undefined;
    
    EngineVersion?: string;
    
    Port?: number;
    
    DBSubnetGroupName?: string;
    
    DatabaseName?: string;
    
    OptionGroupName?: string;
    
    VpcSecurityGroupIds?: string[];
    
    Tags?: Tag[];
    
    KmsKeyId?: string;
    
    EnableIAMDatabaseAuthentication?: boolean;
    
    EnableCloudwatchLogsExports?: string[];
    
    DBClusterParameterGroupName?: string;
    
    DeletionProtection?: boolean;
    
    CopyTagsToSnapshot?: boolean;
}
export interface RestoreDBClusterFromSnapshotResult {
    
    DBCluster?: DBCluster;
}
export interface RestoreDBClusterToPointInTimeMessage {
    
    DBClusterIdentifier: string | undefined;
    
    RestoreType?: string;
    
    SourceDBClusterIdentifier: string | undefined;
    
    RestoreToTime?: Date;
    
    UseLatestRestorableTime?: boolean;
    
    Port?: number;
    
    DBSubnetGroupName?: string;
    
    OptionGroupName?: string;
    
    VpcSecurityGroupIds?: string[];
    
    Tags?: Tag[];
    
    KmsKeyId?: string;
    
    EnableIAMDatabaseAuthentication?: boolean;
    
    EnableCloudwatchLogsExports?: string[];
    
    DBClusterParameterGroupName?: string;
    
    DeletionProtection?: boolean;
}
export interface RestoreDBClusterToPointInTimeResult {
    
    DBCluster?: DBCluster;
}
export interface StartDBClusterMessage {
    
    DBClusterIdentifier: string | undefined;
}
export interface StartDBClusterResult {
    
    DBCluster?: DBCluster;
}
export interface StopDBClusterMessage {
    
    DBClusterIdentifier: string | undefined;
}
export interface StopDBClusterResult {
    
    DBCluster?: DBCluster;
}

export declare const AddRoleToDBClusterMessageFilterSensitiveLog: (obj: AddRoleToDBClusterMessage) => any;

export declare const AddSourceIdentifierToSubscriptionMessageFilterSensitiveLog: (obj: AddSourceIdentifierToSubscriptionMessage) => any;

export declare const EventSubscriptionFilterSensitiveLog: (obj: EventSubscription) => any;

export declare const AddSourceIdentifierToSubscriptionResultFilterSensitiveLog: (obj: AddSourceIdentifierToSubscriptionResult) => any;

export declare const TagFilterSensitiveLog: (obj: Tag) => any;

export declare const AddTagsToResourceMessageFilterSensitiveLog: (obj: AddTagsToResourceMessage) => any;

export declare const ApplyPendingMaintenanceActionMessageFilterSensitiveLog: (obj: ApplyPendingMaintenanceActionMessage) => any;

export declare const PendingMaintenanceActionFilterSensitiveLog: (obj: PendingMaintenanceAction) => any;

export declare const ResourcePendingMaintenanceActionsFilterSensitiveLog: (obj: ResourcePendingMaintenanceActions) => any;

export declare const ApplyPendingMaintenanceActionResultFilterSensitiveLog: (obj: ApplyPendingMaintenanceActionResult) => any;

export declare const CopyDBClusterParameterGroupMessageFilterSensitiveLog: (obj: CopyDBClusterParameterGroupMessage) => any;

export declare const DBClusterParameterGroupFilterSensitiveLog: (obj: DBClusterParameterGroup) => any;

export declare const CopyDBClusterParameterGroupResultFilterSensitiveLog: (obj: CopyDBClusterParameterGroupResult) => any;

export declare const CopyDBClusterSnapshotMessageFilterSensitiveLog: (obj: CopyDBClusterSnapshotMessage) => any;

export declare const DBClusterSnapshotFilterSensitiveLog: (obj: DBClusterSnapshot) => any;

export declare const CopyDBClusterSnapshotResultFilterSensitiveLog: (obj: CopyDBClusterSnapshotResult) => any;

export declare const CopyDBParameterGroupMessageFilterSensitiveLog: (obj: CopyDBParameterGroupMessage) => any;

export declare const DBParameterGroupFilterSensitiveLog: (obj: DBParameterGroup) => any;

export declare const CopyDBParameterGroupResultFilterSensitiveLog: (obj: CopyDBParameterGroupResult) => any;

export declare const CreateDBClusterMessageFilterSensitiveLog: (obj: CreateDBClusterMessage) => any;

export declare const DBClusterRoleFilterSensitiveLog: (obj: DBClusterRole) => any;

export declare const DBClusterMemberFilterSensitiveLog: (obj: DBClusterMember) => any;

export declare const DBClusterOptionGroupStatusFilterSensitiveLog: (obj: DBClusterOptionGroupStatus) => any;

export declare const VpcSecurityGroupMembershipFilterSensitiveLog: (obj: VpcSecurityGroupMembership) => any;

export declare const DBClusterFilterSensitiveLog: (obj: DBCluster) => any;

export declare const CreateDBClusterResultFilterSensitiveLog: (obj: CreateDBClusterResult) => any;

export declare const CreateDBClusterEndpointMessageFilterSensitiveLog: (obj: CreateDBClusterEndpointMessage) => any;

export declare const CreateDBClusterEndpointOutputFilterSensitiveLog: (obj: CreateDBClusterEndpointOutput) => any;

export declare const CreateDBClusterParameterGroupMessageFilterSensitiveLog: (obj: CreateDBClusterParameterGroupMessage) => any;

export declare const CreateDBClusterParameterGroupResultFilterSensitiveLog: (obj: CreateDBClusterParameterGroupResult) => any;

export declare const CreateDBClusterSnapshotMessageFilterSensitiveLog: (obj: CreateDBClusterSnapshotMessage) => any;

export declare const CreateDBClusterSnapshotResultFilterSensitiveLog: (obj: CreateDBClusterSnapshotResult) => any;

export declare const CreateDBInstanceMessageFilterSensitiveLog: (obj: CreateDBInstanceMessage) => any;

export declare const DBParameterGroupStatusFilterSensitiveLog: (obj: DBParameterGroupStatus) => any;

export declare const DBSecurityGroupMembershipFilterSensitiveLog: (obj: DBSecurityGroupMembership) => any;

export declare const AvailabilityZoneFilterSensitiveLog: (obj: AvailabilityZone) => any;

export declare const SubnetFilterSensitiveLog: (obj: Subnet) => any;

export declare const DBSubnetGroupFilterSensitiveLog: (obj: DBSubnetGroup) => any;

export declare const DomainMembershipFilterSensitiveLog: (obj: DomainMembership) => any;

export declare const EndpointFilterSensitiveLog: (obj: Endpoint) => any;

export declare const OptionGroupMembershipFilterSensitiveLog: (obj: OptionGroupMembership) => any;

export declare const PendingCloudwatchLogsExportsFilterSensitiveLog: (obj: PendingCloudwatchLogsExports) => any;

export declare const PendingModifiedValuesFilterSensitiveLog: (obj: PendingModifiedValues) => any;

export declare const DBInstanceStatusInfoFilterSensitiveLog: (obj: DBInstanceStatusInfo) => any;

export declare const DBInstanceFilterSensitiveLog: (obj: DBInstance) => any;

export declare const CreateDBInstanceResultFilterSensitiveLog: (obj: CreateDBInstanceResult) => any;

export declare const CreateDBParameterGroupMessageFilterSensitiveLog: (obj: CreateDBParameterGroupMessage) => any;

export declare const CreateDBParameterGroupResultFilterSensitiveLog: (obj: CreateDBParameterGroupResult) => any;

export declare const CreateDBSubnetGroupMessageFilterSensitiveLog: (obj: CreateDBSubnetGroupMessage) => any;

export declare const CreateDBSubnetGroupResultFilterSensitiveLog: (obj: CreateDBSubnetGroupResult) => any;

export declare const CreateEventSubscriptionMessageFilterSensitiveLog: (obj: CreateEventSubscriptionMessage) => any;

export declare const CreateEventSubscriptionResultFilterSensitiveLog: (obj: CreateEventSubscriptionResult) => any;

export declare const CreateGlobalClusterMessageFilterSensitiveLog: (obj: CreateGlobalClusterMessage) => any;

export declare const GlobalClusterMemberFilterSensitiveLog: (obj: GlobalClusterMember) => any;

export declare const GlobalClusterFilterSensitiveLog: (obj: GlobalCluster) => any;

export declare const CreateGlobalClusterResultFilterSensitiveLog: (obj: CreateGlobalClusterResult) => any;

export declare const DeleteDBClusterMessageFilterSensitiveLog: (obj: DeleteDBClusterMessage) => any;

export declare const DeleteDBClusterResultFilterSensitiveLog: (obj: DeleteDBClusterResult) => any;

export declare const DeleteDBClusterEndpointMessageFilterSensitiveLog: (obj: DeleteDBClusterEndpointMessage) => any;

export declare const DeleteDBClusterEndpointOutputFilterSensitiveLog: (obj: DeleteDBClusterEndpointOutput) => any;

export declare const DeleteDBClusterParameterGroupMessageFilterSensitiveLog: (obj: DeleteDBClusterParameterGroupMessage) => any;

export declare const DeleteDBClusterSnapshotMessageFilterSensitiveLog: (obj: DeleteDBClusterSnapshotMessage) => any;

export declare const DeleteDBClusterSnapshotResultFilterSensitiveLog: (obj: DeleteDBClusterSnapshotResult) => any;

export declare const DeleteDBInstanceMessageFilterSensitiveLog: (obj: DeleteDBInstanceMessage) => any;

export declare const DeleteDBInstanceResultFilterSensitiveLog: (obj: DeleteDBInstanceResult) => any;

export declare const DeleteDBParameterGroupMessageFilterSensitiveLog: (obj: DeleteDBParameterGroupMessage) => any;

export declare const DeleteDBSubnetGroupMessageFilterSensitiveLog: (obj: DeleteDBSubnetGroupMessage) => any;

export declare const DeleteEventSubscriptionMessageFilterSensitiveLog: (obj: DeleteEventSubscriptionMessage) => any;

export declare const DeleteEventSubscriptionResultFilterSensitiveLog: (obj: DeleteEventSubscriptionResult) => any;

export declare const DeleteGlobalClusterMessageFilterSensitiveLog: (obj: DeleteGlobalClusterMessage) => any;

export declare const DeleteGlobalClusterResultFilterSensitiveLog: (obj: DeleteGlobalClusterResult) => any;

export declare const DBClusterEndpointFilterSensitiveLog: (obj: DBClusterEndpoint) => any;

export declare const DBClusterEndpointMessageFilterSensitiveLog: (obj: DBClusterEndpointMessage) => any;

export declare const FilterFilterSensitiveLog: (obj: Filter) => any;

export declare const DescribeDBClusterEndpointsMessageFilterSensitiveLog: (obj: DescribeDBClusterEndpointsMessage) => any;

export declare const DBClusterParameterGroupsMessageFilterSensitiveLog: (obj: DBClusterParameterGroupsMessage) => any;

export declare const DescribeDBClusterParameterGroupsMessageFilterSensitiveLog: (obj: DescribeDBClusterParameterGroupsMessage) => any;

export declare const ParameterFilterSensitiveLog: (obj: Parameter) => any;

export declare const DBClusterParameterGroupDetailsFilterSensitiveLog: (obj: DBClusterParameterGroupDetails) => any;

export declare const DescribeDBClusterParametersMessageFilterSensitiveLog: (obj: DescribeDBClusterParametersMessage) => any;

export declare const DBClusterMessageFilterSensitiveLog: (obj: DBClusterMessage) => any;

export declare const DescribeDBClustersMessageFilterSensitiveLog: (obj: DescribeDBClustersMessage) => any;

export declare const DescribeDBClusterSnapshotAttributesMessageFilterSensitiveLog: (obj: DescribeDBClusterSnapshotAttributesMessage) => any;

export declare const DBClusterSnapshotAttributeFilterSensitiveLog: (obj: DBClusterSnapshotAttribute) => any;

export declare const DBClusterSnapshotAttributesResultFilterSensitiveLog: (obj: DBClusterSnapshotAttributesResult) => any;

export declare const DescribeDBClusterSnapshotAttributesResultFilterSensitiveLog: (obj: DescribeDBClusterSnapshotAttributesResult) => any;

export declare const DBClusterSnapshotMessageFilterSensitiveLog: (obj: DBClusterSnapshotMessage) => any;

export declare const DescribeDBClusterSnapshotsMessageFilterSensitiveLog: (obj: DescribeDBClusterSnapshotsMessage) => any;

export declare const CharacterSetFilterSensitiveLog: (obj: CharacterSet) => any;

export declare const TimezoneFilterSensitiveLog: (obj: Timezone) => any;

export declare const UpgradeTargetFilterSensitiveLog: (obj: UpgradeTarget) => any;

export declare const DBEngineVersionFilterSensitiveLog: (obj: DBEngineVersion) => any;

export declare const DBEngineVersionMessageFilterSensitiveLog: (obj: DBEngineVersionMessage) => any;

export declare const DescribeDBEngineVersionsMessageFilterSensitiveLog: (obj: DescribeDBEngineVersionsMessage) => any;

export declare const DBInstanceMessageFilterSensitiveLog: (obj: DBInstanceMessage) => any;

export declare const DescribeDBInstancesMessageFilterSensitiveLog: (obj: DescribeDBInstancesMessage) => any;

export declare const DBParameterGroupsMessageFilterSensitiveLog: (obj: DBParameterGroupsMessage) => any;

export declare const DescribeDBParameterGroupsMessageFilterSensitiveLog: (obj: DescribeDBParameterGroupsMessage) => any;

export declare const DBParameterGroupDetailsFilterSensitiveLog: (obj: DBParameterGroupDetails) => any;

export declare const DescribeDBParametersMessageFilterSensitiveLog: (obj: DescribeDBParametersMessage) => any;

export declare const DBSubnetGroupMessageFilterSensitiveLog: (obj: DBSubnetGroupMessage) => any;

export declare const DescribeDBSubnetGroupsMessageFilterSensitiveLog: (obj: DescribeDBSubnetGroupsMessage) => any;

export declare const DescribeEngineDefaultClusterParametersMessageFilterSensitiveLog: (obj: DescribeEngineDefaultClusterParametersMessage) => any;

export declare const EngineDefaultsFilterSensitiveLog: (obj: EngineDefaults) => any;

export declare const DescribeEngineDefaultClusterParametersResultFilterSensitiveLog: (obj: DescribeEngineDefaultClusterParametersResult) => any;

export declare const DescribeEngineDefaultParametersMessageFilterSensitiveLog: (obj: DescribeEngineDefaultParametersMessage) => any;

export declare const DescribeEngineDefaultParametersResultFilterSensitiveLog: (obj: DescribeEngineDefaultParametersResult) => any;

export declare const DescribeEventCategoriesMessageFilterSensitiveLog: (obj: DescribeEventCategoriesMessage) => any;

export declare const EventCategoriesMapFilterSensitiveLog: (obj: EventCategoriesMap) => any;

export declare const EventCategoriesMessageFilterSensitiveLog: (obj: EventCategoriesMessage) => any;

export declare const DescribeEventsMessageFilterSensitiveLog: (obj: DescribeEventsMessage) => any;

export declare const EventFilterSensitiveLog: (obj: Event) => any;

export declare const EventsMessageFilterSensitiveLog: (obj: EventsMessage) => any;

export declare const DescribeEventSubscriptionsMessageFilterSensitiveLog: (obj: DescribeEventSubscriptionsMessage) => any;

export declare const EventSubscriptionsMessageFilterSensitiveLog: (obj: EventSubscriptionsMessage) => any;

export declare const DescribeGlobalClustersMessageFilterSensitiveLog: (obj: DescribeGlobalClustersMessage) => any;

export declare const GlobalClustersMessageFilterSensitiveLog: (obj: GlobalClustersMessage) => any;

export declare const DescribeOrderableDBInstanceOptionsMessageFilterSensitiveLog: (obj: DescribeOrderableDBInstanceOptionsMessage) => any;

export declare const OrderableDBInstanceOptionFilterSensitiveLog: (obj: OrderableDBInstanceOption) => any;

export declare const OrderableDBInstanceOptionsMessageFilterSensitiveLog: (obj: OrderableDBInstanceOptionsMessage) => any;

export declare const DescribePendingMaintenanceActionsMessageFilterSensitiveLog: (obj: DescribePendingMaintenanceActionsMessage) => any;

export declare const PendingMaintenanceActionsMessageFilterSensitiveLog: (obj: PendingMaintenanceActionsMessage) => any;

export declare const DescribeValidDBInstanceModificationsMessageFilterSensitiveLog: (obj: DescribeValidDBInstanceModificationsMessage) => any;

export declare const DoubleRangeFilterSensitiveLog: (obj: DoubleRange) => any;

export declare const RangeFilterSensitiveLog: (obj: Range) => any;

export declare const ValidStorageOptionsFilterSensitiveLog: (obj: ValidStorageOptions) => any;

export declare const ValidDBInstanceModificationsMessageFilterSensitiveLog: (obj: ValidDBInstanceModificationsMessage) => any;

export declare const DescribeValidDBInstanceModificationsResultFilterSensitiveLog: (obj: DescribeValidDBInstanceModificationsResult) => any;

export declare const FailoverDBClusterMessageFilterSensitiveLog: (obj: FailoverDBClusterMessage) => any;

export declare const FailoverDBClusterResultFilterSensitiveLog: (obj: FailoverDBClusterResult) => any;

export declare const FailoverGlobalClusterMessageFilterSensitiveLog: (obj: FailoverGlobalClusterMessage) => any;

export declare const FailoverGlobalClusterResultFilterSensitiveLog: (obj: FailoverGlobalClusterResult) => any;

export declare const ListTagsForResourceMessageFilterSensitiveLog: (obj: ListTagsForResourceMessage) => any;

export declare const TagListMessageFilterSensitiveLog: (obj: TagListMessage) => any;

export declare const CloudwatchLogsExportConfigurationFilterSensitiveLog: (obj: CloudwatchLogsExportConfiguration) => any;

export declare const ModifyDBClusterMessageFilterSensitiveLog: (obj: ModifyDBClusterMessage) => any;

export declare const ModifyDBClusterResultFilterSensitiveLog: (obj: ModifyDBClusterResult) => any;

export declare const ModifyDBClusterEndpointMessageFilterSensitiveLog: (obj: ModifyDBClusterEndpointMessage) => any;

export declare const ModifyDBClusterEndpointOutputFilterSensitiveLog: (obj: ModifyDBClusterEndpointOutput) => any;

export declare const DBClusterParameterGroupNameMessageFilterSensitiveLog: (obj: DBClusterParameterGroupNameMessage) => any;

export declare const ModifyDBClusterParameterGroupMessageFilterSensitiveLog: (obj: ModifyDBClusterParameterGroupMessage) => any;

export declare const ModifyDBClusterSnapshotAttributeMessageFilterSensitiveLog: (obj: ModifyDBClusterSnapshotAttributeMessage) => any;

export declare const ModifyDBClusterSnapshotAttributeResultFilterSensitiveLog: (obj: ModifyDBClusterSnapshotAttributeResult) => any;

export declare const ModifyDBInstanceMessageFilterSensitiveLog: (obj: ModifyDBInstanceMessage) => any;

export declare const ModifyDBInstanceResultFilterSensitiveLog: (obj: ModifyDBInstanceResult) => any;

export declare const DBParameterGroupNameMessageFilterSensitiveLog: (obj: DBParameterGroupNameMessage) => any;

export declare const ModifyDBParameterGroupMessageFilterSensitiveLog: (obj: ModifyDBParameterGroupMessage) => any;

export declare const ModifyDBSubnetGroupMessageFilterSensitiveLog: (obj: ModifyDBSubnetGroupMessage) => any;

export declare const ModifyDBSubnetGroupResultFilterSensitiveLog: (obj: ModifyDBSubnetGroupResult) => any;

export declare const ModifyEventSubscriptionMessageFilterSensitiveLog: (obj: ModifyEventSubscriptionMessage) => any;

export declare const ModifyEventSubscriptionResultFilterSensitiveLog: (obj: ModifyEventSubscriptionResult) => any;

export declare const ModifyGlobalClusterMessageFilterSensitiveLog: (obj: ModifyGlobalClusterMessage) => any;

export declare const ModifyGlobalClusterResultFilterSensitiveLog: (obj: ModifyGlobalClusterResult) => any;

export declare const PromoteReadReplicaDBClusterMessageFilterSensitiveLog: (obj: PromoteReadReplicaDBClusterMessage) => any;

export declare const PromoteReadReplicaDBClusterResultFilterSensitiveLog: (obj: PromoteReadReplicaDBClusterResult) => any;

export declare const RebootDBInstanceMessageFilterSensitiveLog: (obj: RebootDBInstanceMessage) => any;

export declare const RebootDBInstanceResultFilterSensitiveLog: (obj: RebootDBInstanceResult) => any;

export declare const RemoveFromGlobalClusterMessageFilterSensitiveLog: (obj: RemoveFromGlobalClusterMessage) => any;

export declare const RemoveFromGlobalClusterResultFilterSensitiveLog: (obj: RemoveFromGlobalClusterResult) => any;

export declare const RemoveRoleFromDBClusterMessageFilterSensitiveLog: (obj: RemoveRoleFromDBClusterMessage) => any;

export declare const RemoveSourceIdentifierFromSubscriptionMessageFilterSensitiveLog: (obj: RemoveSourceIdentifierFromSubscriptionMessage) => any;

export declare const RemoveSourceIdentifierFromSubscriptionResultFilterSensitiveLog: (obj: RemoveSourceIdentifierFromSubscriptionResult) => any;

export declare const RemoveTagsFromResourceMessageFilterSensitiveLog: (obj: RemoveTagsFromResourceMessage) => any;

export declare const ResetDBClusterParameterGroupMessageFilterSensitiveLog: (obj: ResetDBClusterParameterGroupMessage) => any;

export declare const ResetDBParameterGroupMessageFilterSensitiveLog: (obj: ResetDBParameterGroupMessage) => any;

export declare const RestoreDBClusterFromSnapshotMessageFilterSensitiveLog: (obj: RestoreDBClusterFromSnapshotMessage) => any;

export declare const RestoreDBClusterFromSnapshotResultFilterSensitiveLog: (obj: RestoreDBClusterFromSnapshotResult) => any;

export declare const RestoreDBClusterToPointInTimeMessageFilterSensitiveLog: (obj: RestoreDBClusterToPointInTimeMessage) => any;

export declare const RestoreDBClusterToPointInTimeResultFilterSensitiveLog: (obj: RestoreDBClusterToPointInTimeResult) => any;

export declare const StartDBClusterMessageFilterSensitiveLog: (obj: StartDBClusterMessage) => any;

export declare const StartDBClusterResultFilterSensitiveLog: (obj: StartDBClusterResult) => any;

export declare const StopDBClusterMessageFilterSensitiveLog: (obj: StopDBClusterMessage) => any;

export declare const StopDBClusterResultFilterSensitiveLog: (obj: StopDBClusterResult) => any;
